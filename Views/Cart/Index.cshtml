@model List<CartItem>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Giỏ hàng";
}

<div id="csrf-token" style="display: none;">
    <input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(Context).RequestToken" />
</div>

<h2>Giỏ hàng của bạn</h2>

@if (Model.Count == 0)
{
    <p>Giỏ hàng của bạn đang trống.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Hình ảnh</th>
                <th>Tên sản phẩm</th>
                <th>Đơn giá</th>
                <th>Số lượng</th>
                <th>Tổng tiền</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td><img src="@item.ImageUrl" alt="@item.Name" style="width: 50px; height: 50px;" /></td>
                    <td>@item.Name</td>
                    <td>@item.Price</td>
                    <td>
                        <input type="number"
                               value="@item.Quantity"
                               min="1"
                               class="form-control d-inline"
                               style="width: 70px;"
                               data-price="@item.Price"
                               onchange="updateQuantity(@item.DeviceId, this.value, this)" />
                    </td>
                    <td id="item-total-@item.DeviceId">@(item.Price * item.Quantity)</td>
                    <td>
                        <form asp-controller="Cart" asp-action="RemoveFromCart" method="post" style="display:inline;">
                            <input type="hidden" name="deviceId" value="@item.DeviceId" />
                            <button type="submit" class="btn btn-danger btn-sm">Xóa</button>
                        </form>
                        <button type="button"
                                class="btn btn-primary btn-sm"
                                data-bs-toggle="modal"
                                data-bs-target="#rentModal"
                                onclick="setRentModal('@item.DeviceId', '@item.Price', '@(item.Price * item.Quantity)', '@item.Quantity')">
                            Thuê
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal -->
<div class="modal fade" id="rentModal" tabindex="-1" aria-labelledby="rentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rentModalLabel">Thông tin thuê thiết bị</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="modal-deviceId-hidden" />
                <strong>Device ID:</strong> <span id="modal-deviceId"></span><br />
                <strong>Đơn giá:</strong> <span id="modal-price"></span><br />
                <strong>Số lượng:</strong> <span id="modal-quantity"></span><br />
                <div class="mb-2 mt-2">
                    <label for="modal-days" class="form-label">Số ngày thuê:</label>
                    <input type="number" id="modal-days" class="form-control" value="1" min="1" onchange="updateModalTotal()" />
                </div>
                <strong>Tổng tiền:</strong> <span id="modal-total"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-success" onclick="confirmBorrow()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentDeviceId = null;
        let currentPrice = 0;
        let currentQuantity = 1;
        let currentTotal = 0;

        function setRentModal(deviceId, price, total, quantity) {
            // Lấy số lượng mới nhất từ input trên dòng giỏ hàng
            var qtyInput = document.querySelector('input[data-price][onchange*="updateQuantity(' + deviceId + '"]');
            if (qtyInput) {
                currentQuantity = parseInt(qtyInput.value) || 1;
            } else {
                currentQuantity = parseInt(quantity) || 1;
            }
            currentDeviceId = deviceId;
            currentPrice = parseFloat(price);

            document.getElementById('modal-deviceId').innerText = deviceId;
            document.getElementById('modal-deviceId-hidden').value = deviceId;
            document.getElementById('modal-price').innerText = price;
            document.getElementById('modal-quantity').innerText = currentQuantity;
            document.getElementById('modal-days').value = 1;
            document.getElementById('modal-total').innerText = currentPrice * currentQuantity * 1;
        }

        function updateQuantity(deviceId, quantity, inputElem) {
            if (quantity < 1) {
                alert("Số lượng phải lớn hơn 0.");
                return;
            }

            // Lấy giá đơn vị từ input
            var price = parseFloat(inputElem.getAttribute('data-price'));
            // Cập nhật tổng tiền của item này ngay lập tức trên giao diện
            var itemTotalElem = document.getElementById('item-total-' + deviceId);
            if (itemTotalElem) {
                itemTotalElem.innerText = price * quantity;
            }
        }




        function updateModalTotal() {
            const days = parseInt(document.getElementById('modal-days').value) || 1;
            // Lấy lại số lượng mới nhất từ modal
            const quantity = parseInt(document.getElementById('modal-quantity').innerText) || 1;
            const newTotal = currentPrice * quantity * days;
            document.getElementById('modal-total').innerText = newTotal;
        }

        function confirmBorrow() {
            const days = parseInt(document.getElementById('modal-days').value) || 1;
            const deviceId = currentDeviceId;
            const quantity = currentQuantity;
            const total = currentPrice * quantity * days;

            fetch('/Cart/Borrow', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    deviceId: deviceId,
                    quantity: quantity,
                    days: days,
                    total: total
                })
            })
            .then(response => {
                if (response.ok) {
                    // Đóng modal và thông báo thành công
                    var modal = bootstrap.Modal.getInstance(document.getElementById('rentModal'));
                    modal.hide();
                    alert('Đã gửi yêu cầu thuê thành công!');
                    // Có thể reload lại trang hoặc cập nhật giao diện nếu muốn
                    location.reload();
                } else {
                    throw new Error("Thuê thất bại.");
                }
            })
            .catch(error => {
                alert("Đã xảy ra lỗi khi thuê thiết bị.");
                console.error(error);
            });
        }
    </script>
}
